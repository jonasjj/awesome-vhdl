{
	"modelsimrundo": {
		"prefix": ["modelsimrundo", "questarundo"],
		"body": [
			"# This ModelSim DO-script starts or restarts the",
			"# simulation with or without the waveform window.",
			"#",
			"# Usage: do run.do [wave|nowave]",
			"#",
			"# Example: do run.do",
			"#          do run.do wave",
			"#          do run.do nowave",
			"#",
			"# A wave\/nowave flag specified on the command line",
			"# overrides the defaultWaveFlag variable",
			"",
			"namespace eval ::run_do {",
			"",
			"\t# Change these settings to match your project",
			"\t#",
			"\t# tbEnt:   Testbench entity",
			"\t# tcLib:   Testbench library",
			"\t# runTime: Time value (e.g., \"10 ns\")",
			"\t#          or \"-all\" to run until the finish keyword",
			"\tvariable tbEnt ${1:top_tb}",
			"\tvariable tbLib ${2:work}",
			"\tvariable runTime ${3:-all}",
			"$0",
			"\tvariable defaultWaveFlag nowave",
			"\tvariable waveFile wave.do",
			"",
			"\t# 0 = Note  1 = Warning  2 = Error  3 = Failure  4 = Fatal",
			"\tvariable BreakOnAssertion 3",
			"",
			"\t# Don't show base (7'h, 32'd, etc.) in waveform",
			"\tif {[string first \"symbolic showbase\" [radix]] != -1} {",
			"\t\tquietly radix noshowbase",
			"\t}",
			"",
			"\t# Avoid \"File modified outside of source editor\" popup warning",
			"\tset PrefSource(AutoReloadModifiedFiles) 1",
			"",
			"\t# Process command-line arguments \\$1 to \\$9",
			"\tfor {variable i 1} {\\$i < 10} {incr i} {",
			"",
			"\t\tif {[info exists \\$i]} {",
			"\t\t\tvariable arg [subst \"\\\\$\\$i\"]",
			"",
			"\t\t\tif {\\$arg == \"wave\"} {",
			"\t\t\t\tvariable defaultWaveFlag wave",
			"\t\t\t} elseif {\\$arg == \"nowave\"} {",
			"\t\t\t\tvariable defaultWaveFlag nowave",
			"\t\t\t} else {",
			"\t\t\t\techo \"DO script: unrecognized command-line argument: \\\"\\$arg\\\"\"",
			"\t\t\t\techo \"(Should be \\\"wave\\\" or \\\"nowave\\\")\"",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"\t# If the design already is loaded",
			"\tif {[runStatus] != \"nodesign\" && [find instances -bydu -nodu \\$tbEnt] == \"\/\\$tbEnt\"} {",
			"",
			"\t\t# Restart the simulation",
			"\t\trestart -force",
			"\t\tvariable isRestart true",
			"",
			"\t} else {",
			"\t\t# Start a new simulation",
			"\t\tvsim -gui -onfinish stop -msgmode both -voptargs=+acc \\$tbLib.\\$tbEnt",
			"\t\tvariable isRestart false",
			"\t}",
			"",
			"\t# This procedure is a hack to get the path to this script",
			"\t# \"info script\" doesn't work for ModelSim do-files",
			"\tproc getScriptDir {} {",
			"",
			"\t\t# Get the last command from the history",
			"\t\tvariable histLines [split [history] \"\\n\"]",
			"\t\tvariable lastLineIndex [expr [llength \\$histLines] - 1 ]",
			"\t\tvariable lastLine [lindex \\$histLines \\$lastLineIndex]",
			"",
			"\t\t# Remove all quotes",
			"\t\tvariable trimmed [regsub -all {(\\\")} \\$lastLine {}]",
			"",
			"\t\t# Remove the first two words",
			"\t\tvariable trimmed [regsub -all {(^\\s*\\w+\\s+\\w+\\s+)} \\$trimmed {}]",
			"",
			"\t\t# Remove everything after the last slash",
			"\t\tvariable trimmed [regsub -all {([^\\\/]*\\$)} \\$trimmed {}]",
			"",
			"\t\t# Trim whitespace",
			"\t\tvariable trimmed [string trim \\$trimmed]",
			"",
			"\t\t# Remove backslashes (ModelSim uses forward slash on all platforms)",
			"\t\tvariable trimmed [regsub -all {(\\\\\\)} \\$trimmed {}]",
			"",
			"\t\t# If the string is empty",
			"\t\tif {\\$trimmed eq \"\"} {",
			"\t\t\treturn \".\/\"",
			"\t\t}",
			"",
			"\t\t# The trimmed string should contain the location of this script",
			"\t\treturn \\$trimmed",
			"\t}",
			"",
			"\t# Assume that the wave file is in the same dir as the run script",
			"\tvariable waveFile [getScriptDir]\\$waveFile",
			"",
			"",
			"\t# Save the signal history, even before adding them to the",
			"\t# waveform. This slows down the simulation for large designs,",
			"\t# but it allows us to add signals to the waveform",
			"\t# without restarting the simulation after adding them.",
			"\tquietly catch log * -r",
			"",
			"\tif {\\$defaultWaveFlag == \"wave\"} {",
			"",
			"\t\t# If the wave window is not open",
			"\t\tif {[string first \".wave\" [view]] == -1 || \\$isRestart == \"false\"} {",
			"",
			"\t\t\tif {![file exists \\$waveFile]} {",
			"\t\t\t\techo \"Error: Wave format file not found: \\\"\\$waveFile\\\"\"",
			"\t\t\t\treturn",
			"\t\t\t}",
			"",
			"\t\t\tdo \\$waveFile",
			"\t\t}",
			"",
			"\t} else {",
			"\t\tnoview wave",
			"\t}",
			"",
			"\t# Run the testbench",
			"\trun \\$runTime",
			"}"
		],
		"description": "run.do script for VHDL testbench"
	}
}